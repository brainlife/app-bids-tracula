#!/bin/bash
#PBS -l nodes=1:ppn=8,walltime=24:00:00
#PBS -N app-bids-tracula

module load singularity 2> /dev/null

T1=`jq -r '.t1' config.json`
dwi=`jq -r '.dwi' config.json`
bvec=`jq -r '.bvecs' config.json`
bval=`jq -r '.bvals' config.json`
fs=`jq -r '.freesurfer' config.json`

sub=$(jq -r "._inputs[0].meta.subject" config.json | tr -d "_")
if [[ -z $sub || $sub == null ]]; then
    sub=0
fi
bids_sub=sub-$sub

#clean up previous job (just in case)
rm -rf ${bids_sub} output input

#organizing brainlife input to bids structure
mkdir -p input/${bids_sub}/anat
mkdir -p input/${bids_sub}/dwi

#let's cp because ln is problematic when relative path is used
#make BIDS json sidecar
cp $T1 input/${bids_sub}/anat/${bids_sub}_T1w.nii.gz
jq '._inputs[] | select(.id == "t1") | .meta' config.json > input/${bids_sub}/anat/${bids_sub}_T1w.json

cp $dwi input/${bids_sub}/dwi/${bids_sub}_dwi.nii.gz
cp $bvec input/${bids_sub}/dwi/${bids_sub}_dwi.bvec
cp $bval input/${bids_sub}/dwi/${bids_sub}_dwi.bval
jq '._inputs[] | select(.id == "dwi") | .meta' config.json > input/${bids_sub}/dwi/${bids_sub}_dwi.json

if [[ -z $fs || $fs == null ]]; then
    mkdir -p input/derivatives/freesurfer
    cp -r $fs input/derivatives/freesurfer/$bids_sub
    fs_arg="--freesurfer_dir ./input/derivatives/freesurfer"
fi

#loc for output
mkdir output

singularity exec \
    -B $(pwd)/output:/output/$bids_sub \
    docker://bids/tracula:v6.0.0-4 \
    python3 /code/run.py input /output participant \
    --n_cpus 8 --license_key "$FREESURFER_LICENSE" \
    --stages all $fs_arg --participant_label $sub

#exit code from the last command (singularity) will be used.
exit $?
